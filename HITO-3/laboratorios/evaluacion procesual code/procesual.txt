CREATE OR REPLACE FUNCTION contar_vocales(cadena TEXT)
    RETURNS TEXT
BEGIN
    DECLARE a INT DEFAULT 0;
    DECLARE e INT DEFAULT 0;
    DECLARE i INT DEFAULT 0;
    DECLARE o INT DEFAULT 0;
    DECLARE u INT DEFAULT 0;
    DECLARE vocal CHAR(1);
    DECLARE contador INT DEFAULT 1;
    DECLARE longitud INT DEFAULT LENGTH(cadena);

    WHILE contador <= longitud DO
        SET vocal = SUBSTRING(cadena, contador, 1);
        IF vocal = 'a' OR vocal = 'A' THEN
            SET a = a + 1;
        ELSEIF vocal = 'e' OR vocal = 'E' THEN
            SET e = e + 1;
        ELSEIF vocal = 'i' OR vocal = 'I' THEN
            SET i = i + 1;
        ELSEIF vocal = 'o' OR vocal = 'O' THEN
            SET o = o + 1;
        ELSEIF vocal = 'u' OR vocal = 'U' THEN
            SET u = u + 1;
        END IF;
        SET contador = contador + 1;
    END WHILE;

    RETURN CONCAT('La cadena tiene ', a, ' a, ', e, ' e, ', i, ' i, ', o , 'o' ,'' , u, ' u');
END;

select contar_vocales('taller de base de datos') as respuesta;

set @@`global.global_variable` = 10;
CREATE OR REPLACE FUNCTION get_global_variable() RETURNS TEXT
BEGIN
    DECLARE var_value TEXT;
    SET var_value = @@global.global_variable;
    RETURN var_value;
END;

select get_global_variable();

create or replace function  creditos ( creditnumber integer )

returns text
begin

    declare str text default ' ';

    if creditnumber > 5000

         then  set str = ' platinum ';

    end if ;
        if ( creditnumber >= 10000 and creditnumber <= 50000 )

         then  set str = ' Gold  ';

    end if ;
        if creditnumber < 10000

         then set str = ' Silver  ';

    end if ;
    return  str;

end;

select creditos(10000) As tipo;
select creditos(9999) As tipo;


CREATE OR REPLACE FUNCTION concatenar_n_veces(texto VARCHAR(255))
    RETURNS TEXT
BEGIN
    DECLARE resultado TEXT DEFAULT '';
    DECLARE texto2 varchar (50);
    DECLARE i INT DEFAULT LENGTH(texto);
REPEAT
    SET texto2 = SUBSTR(texto, -i, i );
    SET resultado = CONCAT(resultado, texto2, ' , ' );
    SET i = i-1;

until i = 0  end repeat;

    RETURN resultado;
END;


select concatenar_n_veces('dbaii') as letters;


CREATE  OR REPLACE FUNCTION construir_un_string (str1 VARCHAR(20), str2 VARCHAR(20)) RETURNS TEXT
BEGIN
    DECLARE new_str TEXT;
    SET new_str = CONCAT(SUBSTR(str1,1,2), SUBSTR(str1,5), ' -', SUBSTR(str2,8));
    RETURN new_str;
END;

select concatenar_n_veces ('TALLER DBA II', 'GESTION 2023');


-- Crear variable global LIMIT
SET @LIMIT = 7;

-- Crear funciÃ³n para generar serie de Fibonacci
CREATE  OR REPLACE FUNCTION fibonacciEXTRA()
    RETURNS TEXT
BEGIN
    DECLARE fib TEXT;
    DECLARE a INT DEFAULT 0;
    DECLARE b INT DEFAULT 1;
    DECLARE i INT DEFAULT 0;

    SET fib = '';

    WHILE (@LIMIT>= b) DO
        SET fib = CONCAT(fib, a, ',');
        SET a = a + b;
        SET b = a - b;
        SET i = i + 1;
    END WHILE;

    RETURN TRIM(TRAILING ',' FROM fib);
END;


CREATE OR REPLACE FUNCTION fibonacci3 (n INT)
    RETURNS VARCHAR(255)
BEGIN
  DECLARE a INT DEFAULT 0;
  DECLARE b INT DEFAULT 1;
  DECLARE c INT default 0;
  DECLARE i INT DEFAULT 0;
  DECLARE result VARCHAR(255) DEFAULT "";

  WHILE (i < n) DO
    SET c = a + b;
    SET a = b;
    SET b = c;
    SET i = i + 1;
    IF (i < n) THEN
      SET result = CONCAT(result, a, ' , ');
    ELSE
      SET result = CONCAT(result, a);
    END IF;
  END WHILE;

  RETURN result;
END;

select fibonacci3(4)as Resultado;